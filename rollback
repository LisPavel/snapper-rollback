#!/usr/bin/env -S python
import argparse
import btrfsutil
import configparser
import datetime
import os
import shutil


# Text properties
class Color(object):
    PURPLE = '\033[95m'
    CYAN = '\033[96m'
    DARKCYAN = '\033[36m'
    BLUE = '\033[94m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'
    END = '\033[0m'


class FilePath(object):
    def __init__(self, path):
        self.path = path
        self.bold = Color.BOLD + path + Color.END


# Create argument parser
def parse_args():
    parser = argparse.ArgumentParser(description="Rollback to snapper snapshot based on snapshot ID",
                                    prog="rollback")
    # Adding arguments
    parser.add_argument("snapid", type=str,
                        help="ID of snapper snapshot")
    # Parse arguments
    args = parser.parse_args()
    return args


def read_config():
    # Config File
    configfile = "/etc/rollback.conf"
    config = configparser.ConfigParser()
    config.read(f"{configfile}")
    return config


# Elevate user to root if user isn't root
def autoelevate(config):
    sutools = {"doas": "doas", "sudo": "sudo", "su": "su - root -c"}
    subin = config.get("elevation", "subin")
    if subin != "auto":
        return subin
    for supath, subin in sutools.items():
        if shutil.which(supath) is not None:
            return subin


# Tell users what actions will be taken
def verifyrollback(subvolroot, subvololdroot, subvolsnap):
    print(f"{Color.BOLD + Color.RED}The following actions are about to be taken:{Color.END}")
    print(f"Save old {subvolroot.bold} to {subvololdroot.bold}")
    print(f"Roll {subvolroot.bold} back to {subvolsnap.bold}")
    print(f"Set default subvolume to new {subvolroot.bold}")


# Check user EUID to determine if they are root, if they are not then elevate
def isroot(config):
    if os.geteuid() != 0:
        subin = autoelevate(config)
        if subin is None:
            print("No su tool detected, run as root")
            exit()
        print(f"User is not root, rerunning script with {subin}...")
        os.system(f"{subin} python {os.path.realpath(__file__)} {args.snapid}")
        exit()


# Rename root subvolume with the date, then snapshot the snapshot to the old root location
def rollback(subvolid5, subvolroot, subvololdroot, subvolsnap):
    try:
        print(f"Saving old {subvolroot.bold} to {subvololdroot.bold}")
        os.rename(f"{subvolroot.path}", f"{subvololdroot.path}")
        print(f"Rolling {subvolroot.bold} back to {subvolsnap.bold}")
        btrfsutil.create_snapshot(f"{subvolsnap.path}", f"{subvolroot.path}")
        print(f"Setting new {subvolroot.bold} as default subvolume")
        btrfsutil.set_default_subvolume(f"{subvolroot.path}")
        print(f"Rollback to {subvolsnap.bold} complete. Reboot to finish")
    except FileNotFoundError as MissingSubvolroot:
        print(f"{MissingSubvolroot}: Is {subvolid5.bold} mounted with the option subvolid=5?")
    except btrfsutil.BtrfsUtilError as BtrfsErr:  # Handle errors from btrfs utilities
        print(f"{Color.BOLD + Color.RED}{BtrfsErr}: Is the snapshot ID and snapshot subvolume correct?{Color.END}")
        if not os.path.isdir(f"{subvolroot.path}"):  # Move old root back if btrfs utilities fail
            print(f"Moving {subvololdroot.bold} back to {subvolroot.bold}")
            os.rename(f"{subvololdroot.path}", f"{subvolroot.path}")


def main():

    args = parse_args()

    # Internal Variables
    date = datetime.datetime.now()
    date = f"{date.strftime('%Y-%m-%dT%H:%M')}"
    config = read_config()

    subvolid5 = FilePath(f"{config.get('subvolumes', 'subvolid5')}")
    subvolroot = FilePath(f"{subvolid5.path}/{config.get('subvolumes', 'subvolroot')}")
    subvololdroot = FilePath(f"{subvolroot.path}{date}")
    subvolsnap = FilePath(f"{subvolid5.path}/{config.get('subvolumes', 'subvolsnap')}/{args.snapid}/snapshot")

    try:
        verifyrollback(subvolroot, subvololdroot, subvolsnap)
        confirmation = input("Type \"Confirm\" to continue: ")
        if confirmation != "Confirm":
            print("No confirmation, exiting...")
            exit()
    except KeyboardInterrupt as UserExit:
        exit()
    isroot(config)
    print("Confirmed, rolling back...")
    rollback(subvolid5, subvolroot, subvololdroot, subvolsnap)


if __name__ == "__main__":
    main()
