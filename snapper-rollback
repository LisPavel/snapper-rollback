#!/usr/bin/env -S python3
# -*- coding: utf-8 -*-

"""
Script to rollback to snapper snapshot using the layout proposed in the snapper
archwiki page
https://wiki.archlinux.org/index.php/Snapper#Suggested_filesystem_layout
"""

from datetime import datetime

import argparse
import btrfsutil
import configparser
import logging
import os
import pathlib


LOG = logging.getLogger()
LOG.setLevel("INFO")
formatter = logging.Formatter("%(asctime)s - %(levelname)s - %(message)s")
ch = logging.StreamHandler()
ch.setFormatter(formatter)
LOG.addHandler(ch)

def parse_args():
    parser = argparse.ArgumentParser(
        description="Rollback to snapper snapshot based on snapshot ID",
    )
    parser.add_argument("snapid", type=str, help="ID of snapper snapshot")
    parser.add_argument(
        "--dry-run",
        action="store_true",
        help="don't actually perform the action, just print it out",
    )
    parser.add_argument(
        "-c",
        "--config",
        type=str,
        default="/etc/snapper/snapper-rollback.conf",
        help="configuration file to use",
    )
    parser.add_argument(
        "--mount",
        action="store_true",
        help="mount subvol_id5 before performing the rollback operation",
    )
    args = parser.parse_args()
    return args


def read_config(configfile="/etc/snapper/snapper-rollback.conf"):
    config = configparser.ConfigParser()
    config.read(configfile)
    return config


def mount_subvol_id5(target, source=None):
    """
    There is no built-in `mount` function in python, let's shell out to an `os.system` call
    Also see https://stackoverflow.com/a/29156997 for a cleaner alternative
    To make use of this feature, ensure that you have an entry for subvol_id5
    (check out the `noauto` option) in /etc/fstab:

    /dev/sda1  /btrfsroot  btrfs  noauto,rw,subvolid=5 0 0

    /dev/sda1 IS AN EXAMPLE ONLY, YOU WILL HAVE TO ADAPT THIS TO YOUR SYSTEM PARTITION LAYOUT
    See fdisk(8) and fstab(5)
    """
    ret = os.system("mount {} {}".format(source or "", target))
    if ret != 0:
        raise OSError("unable to mount {}".format(target))


def rollback(
    subvol_id5, subvol_rootfs, subvol_rootfs_newname, subvol_rollback_src, dry_run=False
):
    """
    Rename root subvolume with the date, then create a snapshot of the subvolume to
    the old root location
    """
    try:
        if dry_run:
            LOG.info("mv {} {}".format(subvol_rootfs, subvol_rootfs_newname))
            LOG.info(
                "btrfs subvolume snapshot {} {}".format(
                    subvol_rollback_src, subvol_rootfs
                )
            )
            LOG.info("btrfs subvolume set-default {}".format(subvol_rootfs))
        else:
            os.rename(subvol_rootfs, subvol_rootfs_newname)
            btrfsutil.create_snapshot(subvol_rollback_src, subvol_rootfs)
            btrfsutil.set_default_subvolume(subvol_rootfs)
        LOG.info(f"Rollback to {subvol_rollback_src} complete. Reboot to finish")
    except FileNotFoundError as e:
        LOG.fatal(
            f"Missing {subvol_rootfs}: Is {subvol_id5} mounted with the option subvolid=5?"
        )
    except btrfsutil.BtrfsUtilError as e:
        # Handle errors from btrfs utilities
        LOG.error("{e}")
        # Move old root back if btrfs utilities fail
        if not os.path.isdir(subvol_rootfs):
            LOG.info(f"Moving {subvol_rootfs_newname} back to {subvol_rootfs}")
            if dry_run:
                LOG.warning("mv {} {}".format(subvol_rootfs_newname, subvol_rootfs))
            else:
                os.rename(subvol_rootfs_newname, subvol_rootfs)


def main():
    args = parse_args()
    date = datetime.now().strftime("%Y-%m-%dT%H:%M")
    config = read_config(args.config)

    subvol_id5 = pathlib.Path(config.get("subvolumes", "subvol_id5"))
    subvol_rootfs = subvol_id5 / config.get("subvolumes", "subvol_rootfs")
    subvol_rootfs_newname = pathlib.Path("{}{}".format(subvol_rootfs, date))
    subvol_rollback_src = (
        subvol_id5
        / config.get("subvolumes", "subvol_snapshots")
        / args.snapid
        / "snapshot"
    )

    confirm_typed_value = "CONFIRM"
    try:
        confirmation = input(
            "Are you SURE you want to rollback? Type '{}' to continue: ".format(
                confirm_typed_value
            )
        )
        if confirmation != confirm_typed_value:
            LOG.fatal("Bad confirmation, exiting...")
            exit(0)
    except KeyboardInterrupt as e:
        exit(1)
    try:
        if args.mount:
            mount_subvol_id5(config.get("subvolumes", "subvol_id5"))
        rollback(subvol_id5, subvol_rootfs, subvol_rootfs_newname, subvol_rollback_src)
    except PermissionError as e:
        LOG.fatal("Permission denied: {}".format(e))
        exit(1)


if __name__ == "__main__":
    main()
